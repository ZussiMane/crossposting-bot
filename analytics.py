# main.py
import os
import logging
import asyncio
import datetime
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ParseMode
from aiogram.utils import executor

# –ú–æ–¥—É–ª–∏ –±–æ—Ç–∞
from modules.vk_module import VKManager
from modules.telegram_module import TelegramManager
from modules.media_processor import MediaProcessor
from modules.scheduler import SchedulerManager
from modules.analytics import AnalyticsManager
from modules.user_manager import UserManager
from modules.db_manager import DatabaseManager
from modules.settings import Settings

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot_logs.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
settings = Settings()
db_manager = DatabaseManager(settings.DATABASE_URI)
vk_manager = VKManager(os.getenv('VK_TOKEN'))
telegram_manager = TelegramManager(os.getenv('TELEGRAM_API_ID'), os.getenv('TELEGRAM_API_HASH'))
media_processor = MediaProcessor()
scheduler_manager = SchedulerManager(db_manager)
analytics_manager = AnalyticsManager(db_manager)
user_manager = UserManager(db_manager)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class BotStates(StatesGroup):
    # –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    main_menu = State()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    create_post = State()
    add_text = State()
    add_media = State()
    choose_platforms = State()
    schedule_post = State()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
    media_menu = State()
    crop_image = State()
    add_watermark = State()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    schedule_menu = State()
    set_time = State()

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    analytics_menu = State()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = State()

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    admin_menu = State()
    manage_users = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id):
    return await user_manager.check_admin_rights(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def get_main_menu(user_id):
    keyboard = InlineKeyboardMarkup(row_width=2)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(InlineKeyboardButton('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data='create_post'))
    keyboard.add(InlineKeyboardButton('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='schedule'))
    keyboard.add(InlineKeyboardButton('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data='analytics'))
    keyboard.add(InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings'))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if await is_admin(user_id):
        keyboard.add(InlineKeyboardButton('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='manage_users'))

    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not await user_manager.user_exists(user_id):
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ YOUR_TELEGRAM_ID –Ω–∞ –≤–∞—à ID)
        is_admin = user_id == 1641227678
        await user_manager.register_user(
            user_id=user_id,
            username=message.from_user.username,
            full_name=f"{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name else ''}",
            is_admin=is_admin
        )

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –±–æ—Ç–µ –¥–ª—è –∫—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥–∞!\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, Telegram –∏ –Ω–∞ –≤–∞—à —Å–∞–π—Ç.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    await message.answer(welcome_text, reply_markup=await get_main_menu(user_id))
    await BotStates.main_menu.set()

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = (
        "üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*/start* - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "*/post* - –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞\n"
        "*/schedule* - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏\n"
        "*/analytics* - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "*/settings* - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )

    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'create_post', state='*')
async def process_create_post(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(post_text="", media_files=[], platforms=[], schedule_time=None)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='add_text'))
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞', callback_data='add_media'))
    keyboard.add(InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', callback_data='choose_platforms'))
    keyboard.add(InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', callback_data='schedule_post'))
    keyboard.add(InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data='publish_now'))
    keyboard.add(InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫', callback_data='save_draft'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    await bot.edit_message_text(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.create_post.set()

@dp.callback_query_handler(lambda c: c.data == 'add_text', state=BotStates.create_post)
async def process_add_text(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_add_text'))

    await bot.edit_message_text(
        "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        "- *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* –º–µ–∂–¥—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏\n"
        "- _–∫—É—Ä—Å–∏–≤_ –º–µ–∂–¥—É –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏\n"
        "- [—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏](https://example.com)",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.add_text.set()

@dp.message_handler(state=BotStates.add_text)
async def process_text_input(message: types.Message, state: FSMContext):
    post_text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(post_text=post_text)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='add_text'))
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞', callback_data='add_media'))
    keyboard.add(InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', callback_data='choose_platforms'))
    keyboard.add(InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', callback_data='schedule_post'))
    keyboard.add(InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data='publish_now'))
    keyboard.add(InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫', callback_data='save_draft'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{post_text[:200]}{'...' if len(post_text) > 200 else ''}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

    await BotStates.create_post.set()

@dp.callback_query_handler(lambda c: c.data == 'add_media', state=BotStates.create_post)
async def process_add_media(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_add_media'))

    await bot.edit_message_text(
        "üìé *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø–æ—Å—Ç—É.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF\n"
        "- –í–∏–¥–µ–æ: MP4, AVI, MOV\n"
        "- –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOC, DOCX",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.add_media.set()

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO,
                                  types.ContentType.DOCUMENT, types.ContentType.ANIMATION],
                    state=BotStates.add_media)
async def process_media_input(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    media_files = user_data.get('media_files', [])

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ç–∏–ø
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = 'photo'
    elif message.video:
        file_id = message.video.file_id
        file_type = 'video'
    elif message.animation:
        file_id = message.animation.file_id
        file_type = 'animation'  # GIF
    elif message.document:
        file_id = message.document.file_id
        file_type = 'document'
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    file_name = f"{file_id}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs('downloads', exist_ok=True)

    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    download_path = os.path.join('downloads', file_name)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path, download_path)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
    processed_path = await media_processor.process_media(download_path, file_type)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    media_files.append({
        'file_id': file_id,
        'file_type': file_type,
        'file_path': processed_path,
        'original_path': download_path
    })

    await state.update_data(media_files=media_files)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ–¥–∏–∞', callback_data='add_media'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞', callback_data='back_to_create'))

    await message.answer(
        f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(media_files)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'back_to_create', state=BotStates.add_media)
async def back_to_create_post(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='add_text'))
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞', callback_data='add_media'))
    keyboard.add(InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', callback_data='choose_platforms'))
    keyboard.add(InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', callback_data='schedule_post'))
    keyboard.add(InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data='publish_now'))
    keyboard.add(InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫', callback_data='save_draft'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    user_data = await state.get_data()
    media_count = len(user_data.get('media_files', []))
    post_text = user_data.get('post_text', '')

    status_text = "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞*\n\n"

    if post_text:
        status_text += f"‚úÖ –¢–µ–∫—Å—Ç: {post_text[:100]}{'...' if len(post_text) > 100 else ''}\n"
    else:
        status_text += "‚ùå –¢–µ–∫—Å—Ç: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω\n"

    status_text += f"üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: {media_count}\n\n"
    status_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await bot.edit_message_text(
        status_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.create_post.set()

@dp.callback_query_handler(lambda c: c.data == 'choose_platforms', state=BotStates.create_post)
async def process_choose_platforms(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    user_data = await state.get_data()
    selected_platforms = user_data.get('platforms', [])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º
    keyboard = InlineKeyboardMarkup()
    vk_selected = '‚úÖ' if 'vk' in selected_platforms else '‚ùå'
    telegram_selected = '‚úÖ' if 'telegram' in selected_platforms else '‚ùå'
    website_selected = '‚úÖ' if 'website' in selected_platforms else '‚ùå'

    keyboard.add(InlineKeyboardButton(f'{vk_selected} –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', callback_data='toggle_vk'))
    keyboard.add(InlineKeyboardButton(f'{telegram_selected} Telegram', callback_data='toggle_telegram'))
    keyboard.add(InlineKeyboardButton(f'{website_selected} –°–∞–π—Ç (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)', callback_data='toggle_website'))
    keyboard.add(InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ', callback_data='platforms_selected'))
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='back_to_create'))

    await bot.edit_message_text(
        "üåê *–í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.choose_platforms.set()

@dp.callback_query_handler(lambda c: c.data.startswith('toggle_'), state=BotStates.choose_platforms)
async def toggle_platform(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    platform = callback_query.data.replace('toggle_', '')

    # –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-—Å–∞–π—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if platform == 'website':
        await bot.answer_callback_query(
            callback_query.id,
            "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            show_alert=True
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    user_data = await state.get_data()
    selected_platforms = user_data.get('platforms', [])

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if platform in selected_platforms:
        selected_platforms.remove(platform)
    else:
        selected_platforms.append(platform)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(platforms=selected_platforms)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup()
    vk_selected = '‚úÖ' if 'vk' in selected_platforms else '‚ùå'
    telegram_selected = '‚úÖ' if 'telegram' in selected_platforms else '‚ùå'
    website_selected = '‚úÖ' if 'website' in selected_platforms else '‚ùå'

    keyboard.add(InlineKeyboardButton(f'{vk_selected} –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', callback_data='toggle_vk'))
    keyboard.add(InlineKeyboardButton(f'{telegram_selected} Telegram', callback_data='toggle_telegram'))
    keyboard.add(InlineKeyboardButton(f'{website_selected} –°–∞–π—Ç (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)', callback_data='toggle_website'))
    keyboard.add(InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ', callback_data='platforms_selected'))
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='back_to_create'))

    await bot.edit_message_text(
        "üåê *–í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data == 'platforms_selected', state=BotStates.choose_platforms)
async def platforms_selected(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    user_data = await state.get_data()
    selected_platforms = user_data.get('platforms', [])

    if not selected_platforms:
        await bot.answer_callback_query(
            callback_query.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            show_alert=True
        )
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='add_text'))
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞', callback_data='add_media'))
    keyboard.add(InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', callback_data='choose_platforms'))
    keyboard.add(InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', callback_data='schedule_post'))
    keyboard.add(InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data='publish_now'))
    keyboard.add(InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫', callback_data='save_draft'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    platforms_text = ', '.join([p.capitalize() for p in selected_platforms])

    user_data = await state.get_data()
    media_count = len(user_data.get('media_files', []))
    post_text = user_data.get('post_text', '')

    status_text = "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞*\n\n"

    if post_text:
        status_text += f"‚úÖ –¢–µ–∫—Å—Ç: {post_text[:100]}{'...' if len(post_text) > 100 else ''}\n"
    else:
        status_text += "‚ùå –¢–µ–∫—Å—Ç: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω\n"

    status_text += f"üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: {media_count}\n"
    status_text += f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_text}\n\n"
    status_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await bot.edit_message_text(
        status_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.create_post.set()

@dp.callback_query_handler(lambda c: c.data == 'schedule_post', state=BotStates.create_post)
async def schedule_post(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è', callback_data='schedule_today'))
    keyboard.add(InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞', callback_data='schedule_tomorrow'))
    keyboard.add(InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', callback_data='schedule_custom'))
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='back_to_create'))

    await bot.edit_message_text(
        "üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.schedule_post.set()

@dp.callback_query_handler(lambda c: c.data.startswith('schedule_'), state=BotStates.schedule_post)
async def set_schedule_date(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    schedule_option = callback_query.data.replace('schedule_', '')

    if schedule_option == 'today':
        date = datetime.datetime.now().date()
    elif schedule_option == 'tomorrow':
        date = (datetime.datetime.now() + datetime.timedelta(days=1)).date()
    elif schedule_option == 'custom':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        date = datetime.datetime.now().date()
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞
        await back_to_create_post(callback_query, state)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(schedule_date=date.strftime('%Y-%m-%d'))

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
    keyboard = InlineKeyboardMarkup(row_width=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å 10:00 –¥–æ 21:00
    for hour in range(10, 22):
        keyboard.insert(InlineKeyboardButton(f"{hour}:00", callback_data=f"time_{hour}_00"))

    for hour in range(10, 22):
        keyboard.insert(InlineKeyboardButton(f"{hour}:30", callback_data=f"time_{hour}_30"))

    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='back_to_create'))

    await bot.edit_message_text(
        f"üïí *–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
        f"–î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.set_time.set()

@dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BotStates.set_time)
async def set_schedule_time(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    time_parts = callback_query.data.replace('time_', '').split('_')
    hour = int(time_parts[0])
    minute = int(time_parts[1])

    user_data = await state.get_data()
    date_str = user_data.get('schedule_date')

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    date = datetime.datetime.strptime(date_str, '%Y-%m-%d')
    scheduled_time = date.replace(hour=hour, minute=minute)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –ø—Ä–æ—à–ª–æ–µ
    if scheduled_time < datetime.datetime.now():
        await bot.answer_callback_query(
            callback_query.id,
            "–ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            show_alert=True
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(schedule_time=scheduled_time.strftime('%Y-%m-%d %H:%M:%S'))

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='add_text'))
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞', callback_data='add_media'))
    keyboard.add(InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', callback_data='choose_platforms'))
    keyboard.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', callback_data='schedule_post'))
    keyboard.add(InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç', callback_data='confirm_schedule'))
    keyboard.add(InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data='publish_now'))
    keyboard.add(InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫', callback_data='save_draft'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    user_data = await state.get_data()
    media_count = len(user_data.get('media_files', []))
    post_text = user_data.get('post_text', '')
    platforms = user_data.get('platforms', [])
    platforms_text = ', '.join([p.capitalize() for p in platforms])

    status_text = "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞*\n\n"

    if post_text:
        status_text += f"‚úÖ –¢–µ–∫—Å—Ç: {post_text[:100]}{'...' if len(post_text) > 100 else ''}\n"
    else:
        status_text += "‚ùå –¢–µ–∫—Å—Ç: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω\n"

    status_text += f"üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: {media_count}\n"
    status_text += f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_text}\n"
    status_text += f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n\n"
    status_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await bot.edit_message_text(
        status_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.create_post.set()

@dp.callback_query_handler(lambda c: c.data == 'confirm_schedule', state=BotStates.create_post)
async def confirm_schedule_post(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    user_data = await state.get_data()
    post_text = user_data.get('post_text', '')
    media_files = user_data.get('media_files', [])
    platforms = user_data.get('platforms', [])
    schedule_time_str = user_data.get('schedule_time')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not post_text and not media_files:
        await bot.answer_callback_query(
            callback_query.id,
            "–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.",
            show_alert=True
        )
        return

    if not platforms:
        await bot.answer_callback_query(
            callback_query.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
    schedule_time = datetime.datetime.strptime(schedule_time_str, '%Y-%m-%d %H:%M:%S')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    post_id = await db_manager.create_post(
        user_id=callback_query.from_user.id,
        text=post_text,
        media_files=media_files,
        platforms=platforms,
        schedule_time=schedule_time
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await scheduler_manager.schedule_post(post_id, schedule_time)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    keyboard.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', callback_data='create_post'))
    keyboard.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏', callback_data='schedule'))

    platforms_text = ', '.join([p.capitalize() for p in platforms])

    await bot.edit_message_text(
        f"‚úÖ *–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!*\n\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_text}\n\n"
        f"–í–∞—à –ø–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.main_menu.set()

@dp.callback_query_handler(lambda c: c.data == 'publish_now', state=BotStates.create_post)
async def publish_post_now(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    user_data = await state.get_data()
    post_text = user_data.get('post_text', '')
    media_files = user_data.get('media_files', [])
    platforms = user_data.get('platforms', [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not post_text and not media_files:
        await bot.answer_callback_query(
            callback_query.id,
            "–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.",
            show_alert=True
        )
        return

    if not platforms:
        await bot.answer_callback_query(
            callback_query.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await bot.edit_message_text(
        "üîÑ *–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞...*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    post_id = await db_manager.create_post(
        user_id=callback_query.from_user.id,
        text=post_text,
        media_files=media_files,
        platforms=platforms,
        schedule_time=None,  # –ü–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è —Å—Ä–∞–∑—É
        status='publishing'
    )

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    results = {}

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    if 'vk' in platforms:
        try:
            vk_post_id = await vk_manager.publish_post(post_text, media_files)
            results['vk'] = {'success': True, 'post_id': vk_post_id}
        except Exception as e:
            results['vk'] = {'success': False, 'error': str(e)}
            logger.error(f"Error publishing to VK: {e}")

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    if 'telegram' in platforms:
        try:
            tg_message_ids = await telegram_manager.publish_post(post_text, media_files)
            results['telegram'] = {'success': True, 'message_ids': tg_message_ids}
        except Exception as e:
            results['telegram'] = {'success': False, 'error': str(e)}
            logger.error(f"Error publishing to Telegram: {e}")

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    """
    if 'website' in platforms:
        try:
            website_post_id = await website_manager.publish_post(post_text, media_files)
            results['website'] = {'success': True, 'post_id': website_post_id}
        except Exception as e:
            results['website'] = {'success': False, 'error': str(e)}
            logger.error(f"Error publishing to Website: {e}")
    """

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success_count = sum(1 for platform in results if results[platform]['success'])
    status = 'published' if success_count > 0 else 'failed'

    await db_manager.update_post(
        post_id=post_id,
        status=status,
        results=results
    )

    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if success_count > 0:
        await analytics_manager.start_tracking(post_id, platforms)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    results_text = ""
    for platform in results:
        if results[platform]['success']:
            results_text += f"‚úÖ {platform.capitalize()}: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ\n"
        else:
            results_text += f"‚ùå {platform.capitalize()}: –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    keyboard.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', callback_data='create_post'))
    keyboard.add(InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='post_stats_' + str(post_id)))

    await bot.edit_message_text(
        f"üì§ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
        f"{results_text}\n"
        f"–ü–æ—Å—Ç {'–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ' if success_count > 0 else '–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}.",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.main_menu.set()

@dp.callback_query_handler(lambda c: c.data == 'save_draft', state=BotStates.create_post)
async def save_post_draft(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    user_data = await state.get_data()
    post_text = user_data.get('post_text', '')
    media_files = user_data.get('media_files', [])
    platforms = user_data.get('platforms', [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if not post_text and not media_files:
        await bot.answer_callback_query(
            callback_query.id,
            "–ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.",
            show_alert=True
        )
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    draft_id = await db_manager.create_post(
        user_id=callback_query.from_user.id,
        text=post_text,
        media_files=media_files,
        platforms=platforms,
        schedule_time=None,
        status='draft'
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    keyboard.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', callback_data='create_post'))
    keyboard.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏', callback_data='drafts'))

    await bot.edit_message_text(
        "‚úÖ *–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏'.",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.main_menu.set()

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
@dp.callback_query_handler(lambda c: c.data == 'schedule', state='*')
async def schedule_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã', callback_data='scheduled_posts'))
    keyboard.add(InlineKeyboardButton('–ß–µ—Ä–Ω–æ–≤–∏–∫–∏', callback_data='drafts'))
    keyboard.add(InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã', callback_data='published_posts'))
    keyboard.add(InlineKeyboardButton('–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π', callback_data='calendar'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    await bot.edit_message_text(
        "üìÖ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.schedule_menu.set()

@dp.callback_query_handler(lambda c: c.data == 'scheduled_posts', state=BotStates.schedule_menu)
async def view_scheduled_posts(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    scheduled_posts = await db_manager.get_posts_by_status(
        user_id=callback_query.from_user.id,
        status='scheduled',
        limit=10
    )

    if not scheduled_posts:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data='create_post'))
        keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='schedule'))

        await bot.edit_message_text(
            "üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤*\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
    posts_text = ""
    for post in scheduled_posts:
        schedule_time = datetime.datetime.fromisoformat(post['schedule_time'])
        platforms = ', '.join([p.capitalize() for p in post['platforms']])
        text_preview = post['text'][:50] + '...' if post['text'] and len(post['text']) > 50 else post['text'] or '[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]'

        posts_text += (
            f"üìù *–ü–æ—Å—Ç #{post['id']}*\n"
            f"‚è∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üåê {platforms}\n"
            f"üìÑ {text_preview}\n\n"
        )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏', callback_data='manage_scheduled'))
    keyboard.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', callback_data='create_post'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='schedule'))

    await bot.edit_message_text(
        f"üìÖ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã*\n\n"
        f"{posts_text}"
        f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(scheduled_posts)}",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data == 'manage_scheduled', state=BotStates.schedule_menu)
async def manage_scheduled_posts(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    scheduled_posts = await db_manager.get_posts_by_status(
        user_id=callback_query.from_user.id,
        status='scheduled',
        limit=10
    )

    keyboard = InlineKeyboardMarkup()

    for post in scheduled_posts:
        schedule_time = datetime.datetime.fromisoformat(post['schedule_time'])
        text_preview = post['text'][:20] + '...' if post['text'] and len(post['text']) > 20 else post['text'] or '[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]'
        button_text = f"#{post['id']} | {schedule_time.strftime('%d.%m %H:%M')} | {text_preview}"
        keyboard.add(InlineKeyboardButton(button_text, callback_data=f"manage_post_{post['id']}"))

    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='scheduled_posts'))

    await bot.edit_message_text(
        "üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith('manage_post_'), state=BotStates.schedule_menu)
async def manage_specific_post(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    post_id = int(callback_query.data.replace('manage_post_', ''))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
    post = await db_manager.get_post_by_id(post_id)

    if not post:
        await bot.answer_callback_query(
            callback_query.id,
            "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            show_alert=True
        )
        await manage_scheduled_posts(callback_query, state)
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
    schedule_time = datetime.datetime.fromisoformat(post['schedule_time'])
    platforms = ', '.join([p.capitalize() for p in post['platforms']])
    media_count = len(post['media_files']) if post['media_files'] else 0

    post_info = (
        f"üìù *–ü–æ—Å—Ç #{post['id']}*\n\n"
        f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms}\n"
        f"üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: {media_count}\n\n"
        f"üìÑ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{post['text'] or '[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]'}"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç', callback_data=f"edit_post_{post_id}"))
    keyboard.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', callback_data=f"reschedule_post_{post_id}"))
    keyboard.add(InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data=f"publish_now_{post_id}"))
    keyboard.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f"delete_post_{post_id}"))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="manage_scheduled"))

    await bot.edit_message_text(
        post_info,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith('delete_post_'), state=BotStates.schedule_menu)
async def confirm_delete_post(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    post_id = int(callback_query.data.replace('delete_post_', ''))

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–î–∞, —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', callback_data=f"confirm_delete_{post_id}"))
    keyboard.add(InlineKeyboardButton('–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data=f"manage_post_{post_id}"))

    await bot.edit_message_text(
        "‚ùì *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç #{post_id}?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_'), state=BotStates.schedule_menu)
async def delete_post(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    post_id = int(callback_query.data.replace('confirm_delete_', ''))

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    await db_manager.delete_post(post_id)
    await scheduler_manager.cancel_scheduled_post(post_id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–º', callback_data="scheduled_posts"))
    keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data="back_to_main"))

    await bot.edit_message_text(
        "‚úÖ *–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!*",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
@dp.callback_query_handler(lambda c: c.data == 'analytics', state='*')
async def analytics_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', callback_data='posts_stats'))
    keyboard.add(InlineKeyboardButton('–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data='general_stats'))
    keyboard.add(InlineKeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data='recommendations'))
    keyboard.add(InlineKeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤', callback_data='export_reports'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    await bot.edit_message_text(
        "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.analytics_menu.set()

@dp.callback_query_handler(lambda c: c.data == 'posts_stats', state=BotStates.analytics_menu)
async def view_posts_stats(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    published_posts = await db_manager.get_posts_by_status(
        user_id=callback_query.from_user.id,
        status='published',
        limit=10
    )

    if not published_posts:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data='create_post'))
        keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='analytics'))

        await bot.edit_message_text(
            "üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤*\n\n"
            "–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
    keyboard = InlineKeyboardMarkup()

    for post in published_posts:
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        try:
            if isinstance(post['published_at'], str):
                publish_date = datetime.datetime.fromisoformat(post['published_at'])
            else:
                publish_date = post['published_at']
        except (TypeError, ValueError):
            publish_date = datetime.datetime.utcnow()
            text_preview = post['text'][:20] + '...' if post['text'] and len(post['text']) > 20 else post['text'] or '[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]'
            button_text = f"#{post['id']} | {publish_date.strftime('%d.%m %H:%M')} | {text_preview}"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=f"post_stats_{post['id']}"))

    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='analytics'))

    await bot.edit_message_text(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith('post_stats_'), state='*')
async def view_post_statistics(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    post_id = int(callback_query.data.replace('post_stats_', ''))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
    post = await db_manager.get_post_by_id(post_id)

    if not post:
        await bot.answer_callback_query(
            callback_query.id,
            "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            show_alert=True
        )
        await view_posts_stats(callback_query, state)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞
    stats = await analytics_manager.get_post_statistics(post_id)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    platforms = post['platforms']
    publish_date = datetime.datetime.fromisoformat(post['published_at'])

    stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞ #{post_id}*\n\n"
    stats_text += f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {publish_date.strftime('%d.%m.%Y %H:%M')}\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    for platform in platforms:
        platform_stats = stats.get(platform, {})

        if platform == 'vk':
            stats_text += "*–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:*\n"
            stats_text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {platform_stats.get('views', 0)}\n"
            stats_text += f"üëç –õ–∞–π–∫–∏: {platform_stats.get('likes', 0)}\n"
            stats_text += f"üîÑ –†–µ–ø–æ—Å—Ç—ã: {platform_stats.get('reposts', 0)}\n"
            stats_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {platform_stats.get('comments', 0)}\n\n"

        elif platform == 'telegram':
            stats_text += "*Telegram:*\n"
            stats_text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {platform_stats.get('views', 0)}\n"
            stats_text += f"üëç –†–µ–∞–∫—Ü–∏–∏: {platform_stats.get('reactions', 0)}\n"
            stats_text += f"üì¢ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {platform_stats.get('forwards', 0)}\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–∞–π—Ç–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥)
        """
        elif platform == 'website':
            stats_text += "*–°–∞–π—Ç:*\n"
            stats_text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {platform_stats.get('views', 0)}\n"
            stats_text += f"üëç –õ–∞–π–∫–∏: {platform_stats.get('likes', 0)}\n"
            stats_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {platform_stats.get('comments', 0)}\n\n"
        """

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_text += "*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    stats_text += f"üëÅ –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {stats.get('total', {}).get('reach', 0)}\n"
    stats_text += f"üë• –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('total', {}).get('engagement_rate', 0)}%\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data=f"refresh_stats_{post_id}"))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤', callback_data="posts_stats"))
    keyboard.add(InlineKeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data=f"export_stats_{post_id}"))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', callback_data='analytics'))

    await bot.edit_message_text(
        stats_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith('refresh_stats_'), state='*')
async def refresh_post_statistics(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...")

    post_id = int(callback_query.data.replace('refresh_stats_', ''))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await analytics_manager.update_post_statistics(post_id)

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await view_post_statistics(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == 'general_stats', state=BotStates.analytics_menu)
async def view_general_statistics(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = await analytics_manager.get_general_statistics(user_id=callback_query.from_user.id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    total_posts = stats.get('total_posts', 0)
    total_reach = stats.get('total_reach', 0)
    avg_engagement = stats.get('avg_engagement', 0)
    best_time = stats.get('best_time', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    best_platform = stats.get('best_platform', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

    stats_text = (
        "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üìù –í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
        f"üëÅ –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {total_reach}\n"
        f"üë• –°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {avg_engagement}%\n\n"
        f"‚è∞ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {best_time}\n"
        f"üåê –ù–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {best_platform}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π."
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', callback_data='export_full_stats'))
    keyboard.add(InlineKeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data='recommendations'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='analytics'))

    await bot.edit_message_text(
        stats_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data == 'recommendations', state=BotStates.analytics_menu)
async def view_recommendations(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    recommendations = await analytics_manager.get_recommendations(user_id=callback_query.from_user.id)

    if not recommendations:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='analytics'))

        await bot.edit_message_text(
            "‚ùì *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π*\n\n"
            "–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.",
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    time_recom = recommendations.get('best_time', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
    content_recom = recommendations.get('content_type', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
    platform_recom = recommendations.get('platform', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')

    recom_text = (
        "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π*\n\n"
        f"‚è∞ *–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n{time_recom}\n\n"
        f"üìù *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:*\n{content_recom}\n\n"
        f"üåê *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*\n{platform_recom}\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–æ–≤—ã–π –ø–æ—Å—Ç —Å —É—á–µ—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π', callback_data='create_recommended_post'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='analytics'))

    await bot.edit_message_text(
        recom_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data == 'export_reports', state=BotStates.analytics_menu)
async def export_reports_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é', callback_data='export_week'))
    keyboard.add(InlineKeyboardButton('–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü', callback_data='export_month'))
    keyboard.add(InlineKeyboardButton('–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data='export_full'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='analytics'))

    await bot.edit_message_text(
        "üìä *–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith('export_'), state=BotStates.analytics_menu)
async def export_report(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    period = callback_query.data.replace('export_', '')

    if period == 'week':
        period_name = "–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è"
        days = 7
    elif period == 'month':
        period_name = "–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
        days = 30
    else:  # full
        period_name = "–≤—Å–µ –≤—Ä–µ–º—è"
        days = None

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report_path = await analytics_manager.generate_report(
        user_id=callback_query.from_user.id,
        days=days
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(report_path, 'rb') as report_file:
        await bot.send_document(
            chat_id=callback_query.message.chat.id,
            document=InputFile(report_file, filename=f"report_{period}.xlsx"),
            caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞ {period_name}"
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    os.remove(report_path)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', callback_data='analytics'))

    await bot.send_message(
        callback_query.message.chat.id,
        "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!",
        reply_markup=keyboard
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data == 'settings', state='*')
async def user_settings_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    user_settings = await user_manager.get_user_settings(user_id)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    notifications_status = "–í–∫–ª—é—á–µ–Ω—ã" if user_settings.get('notifications', True) else "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    lang = user_settings.get('language', '–†—É—Å—Å–∫–∏–π')

    settings_text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}\n"
        f"üåê –Ø–∑—ã–∫: {lang}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏', callback_data='manage_notifications'))
    keyboard.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', callback_data='change_language'))
    keyboard.add(InlineKeyboardButton('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data='manage_accounts'))
    keyboard.add(InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞', callback_data='media_settings'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    await bot.edit_message_text(
        settings_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.user_settings.set()

@dp.callback_query_handler(lambda c: c.data == 'manage_notifications', state=BotStates.user_settings)
async def manage_notifications(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_id = callback_query.from_user.id
    user_settings = await user_manager.get_user_settings(user_id)

    notifications = user_settings.get('notifications', {})
    post_published = notifications.get('post_published', True)
    analytics_update = notifications.get('analytics_update', True)
    scheduled_reminder = notifications.get('scheduled_reminder', True)

    notification_text = (
        "üîî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏*\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        f"{'‚úÖ' if post_published else '‚ùå'} –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤",
        callback_data='toggle_notif_published'
    ))
    keyboard.add(InlineKeyboardButton(
        f"{'‚úÖ' if analytics_update else '‚ùå'} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
        callback_data='toggle_notif_analytics'
    ))
    keyboard.add(InlineKeyboardButton(
        f"{'‚úÖ' if scheduled_reminder else '‚ùå'} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö",
        callback_data='toggle_notif_scheduled'
    ))
    keyboard.add(InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='disable_all_notif'))
    keyboard.add(InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='enable_all_notif'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='settings'))

    await bot.edit_message_text(
        notification_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data.startswith('toggle_notif_'), state=BotStates.user_settings)
async def toggle_notification(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    notif_type = callback_query.data.replace('toggle_notif_', '')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_id = callback_query.from_user.id
    user_settings = await user_manager.get_user_settings(user_id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if 'notifications' not in user_settings:
        user_settings['notifications'] = {}

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    current_value = user_settings['notifications'].get(notif_type, True)
    user_settings['notifications'][notif_type] = not current_value

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await user_manager.update_user_settings(user_id, user_settings)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await manage_notifications(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == 'disable_all_notif', state=BotStates.user_settings)
async def disable_all_notifications(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user_id = callback_query.from_user.id
    user_settings = await user_manager.get_user_settings(user_id)

    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_settings['notifications'] = {
        'post_published': False,
        'analytics_update': False,
        'scheduled_reminder': False
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await user_manager.update_user_settings(user_id, user_settings)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await manage_notifications(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == 'enable_all_notif', state=BotStates.user_settings)
async def enable_all_notifications(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user_id = callback_query.from_user.id
    user_settings = await user_manager.get_user_settings(user_id)

    # –í–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_settings['notifications'] = {
        'post_published': True,
        'analytics_update': True,
        'scheduled_reminder': True
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await user_manager.update_user_settings(user_id, user_settings)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await manage_notifications(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == 'manage_accounts', state=BotStates.user_settings)
async def manage_accounts(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    accounts = await user_manager.get_connected_accounts(user_id)

    vk_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if accounts.get('vk') else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    telegram_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if accounts.get('telegram') else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    website_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    accounts_text = (
        "üîó *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n"
        f"–í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {vk_status}\n"
        f"Telegram: {telegram_status}\n"
        f"–°–∞–π—Ç: {website_status}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', callback_data='setup_vk'))
    keyboard.add(InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram', callback_data='setup_telegram'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='settings'))

    await bot.edit_message_text(
        accounts_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query_handler(lambda c: c.data == 'setup_vk', state=BotStates.user_settings)
async def setup_vk_account(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', url='https://vk.com/dev/implicit_flow_user'))
    keyboard.add(InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω', callback_data='enter_vk_token'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='manage_accounts'))

    await bot.edit_message_text(
        "üîë *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ*\n\n"
        "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ API.\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ'\n"
        "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
        "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä access_token)\n"
        "5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω'\n\n"
        "‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ wall, photos, video –∏ docs",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
@dp.callback_query_handler(lambda c: c.data == 'manage_users', state='*')
async def admin_manage_users(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(callback_query.from_user.id):
        await bot.answer_callback_query(
            callback_query.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.",
            show_alert=True
        )
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='list_users'))
    keyboard.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='add_admin'))
    keyboard.add(InlineKeyboardButton('–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π', callback_data='action_log'))
    keyboard.add(InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞', callback_data='access_settings'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main'))

    await bot.edit_message_text(
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞:",
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

    await BotStates.admin_menu.set()

@dp.callback_query_handler(lambda c: c.data == 'list_users', state=BotStates.admin_menu)
async def list_users(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await user_manager.get_all_users(limit=20)

    if not users:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='manage_users'))

        await bot.edit_message_text(
            "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –µ—â–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"

    for user in users:
        admin_mark = "üëë " if user.get('is_admin') else ""
        users_text += f"{admin_mark}ID: {user['id']} | {user.get('username', '–ù–µ—Ç –∏–º–µ–Ω–∏')} | {user.get('created_at')}\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏', callback_data='manage_permissions'))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='manage_users'))

    await bot.edit_message_text(
        users_text,
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'back_to_main', state='*')
async def back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.finish()
    await BotStates.main_menu.set()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥–∞!\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, Telegram –∏ –Ω–∞ –≤–∞—à —Å–∞–π—Ç.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    try:
        keyboard = await get_main_menu(callback_query.from_user.id)
        await bot.edit_message_text(
            welcome_text,
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', callback_data='create_post'))
        keyboard.add(InlineKeyboardButton('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='schedule'))
        keyboard.add(InlineKeyboardButton('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data='analytics'))
        keyboard.add(InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings'))

        await bot.send_message(
            callback_query.message.chat.id,
            welcome_text,
            reply_markup=keyboard
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    loop = asyncio.get_event_loop()
    loop.run_until_complete(db_manager.init_db())

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    loop.run_until_complete(scheduler_manager.start())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
